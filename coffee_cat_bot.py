from telegram.ext import Updater, CommandHandler, InlineQueryHandler, \
    MessageHandler, Filters, CallbackQueryHandler
from telegram import InlineQueryResultArticle, InputTextMessageContent
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
import logging
import requests
import os
import datetime

from statistics import Statistic


class CoffeeCatBot:
    def __init__(self):
        self.stat = Statistic()
        self.updater = Updater(token=os.environ['token_bot'], use_context=True)
        dp = self.updater.dispatcher

        dp.add_handler(CommandHandler('start', self.start))
        dp.add_handler(CommandHandler('time_now', self.time_now))
        dp.add_handler(CommandHandler('stat', self.statistic))
        dp.add_handler(CommandHandler("cat", self.send_cat))
        dp.add_handler(CommandHandler("coffee", self.coffee))
        dp.add_handler(CallbackQueryHandler(self.get_callback_from_button))
        dp.add_handler(MessageHandler(Filters.text & (~Filters.command), self.echo))
        dp.add_handler(MessageHandler(Filters.command, self.unknown))
        dp.add_handler(InlineQueryHandler(self.inline_))

        self.logger = logging.getLogger(__name__)

        if os.environ.get('token_bot'):
            self.logger.info('–ü–æ–≥–Ω–∞–ª–∏!')
        else:
            self.logger.info('–ù—É–∂–µ–Ω token_bot. –î–æ–±–∞–≤—å –µ–≥–æ –∏–ª–∏ –Ω–µ –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å!')

        self.updater.start_polling()

        self.time = datetime.datetime.today().strftime('%m/%d/%Y %H:%M')
        self.query_user_id = []

    def start(self, update, context):
        f = 'start'
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        self.stat.statistic_updata(user_id, user_name, user_fullname, f)
        text = "%s \n%s \n%s \n%s \n%s \n%s \n%s \n%s \n%s \n%s \n" % (
            "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!",
            "–ï—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ, "
            "—è –±—É–¥—É –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ(",
            "",
            "–ö–æ–º–∞–Ω–¥–∞ /time_now –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â—É—é—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.",
            "–ö–æ–º–∞–Ω–¥–∞ /cat –ø–æ–∫–∞–∂–µ—Ç –≤–∞–º –∫–∞—Ä—Ç—É–Ω–∫—É —Å –∫–æ—Ç–∏–∫–æ–º.",
            "",
            "–ï—â–µ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É "
            "–ø–æ —ç—Ç–æ–º—É –±–æ—Ç—É, –Ω–æ —è –í–∞–º –Ω–µ —Å–∫–∞–∂—É)",
            "",
            "",
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @Elrik237",
        )
        context.bot.send_message(chat_id=update.effective_chat.id, text=text)

        keyboard1 = [
            [
                InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data='1'),
                InlineKeyboardButton("–ö–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–æ—Ç–∏–∫–∞–º–∏", callback_data='2'),
            ],
            [
                InlineKeyboardButton("–í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ —Å @Elrik237", callback_data='3')
            ],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard1)

        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=reply_markup)

    def get_cat(self):
        try:
            r = requests.get('http://thecatapi.com/api/images/get?format=src')
            url = r.url
        except:
            url = self.get_cat()
            logging.info('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º')
            pass
        return url

    def send_cat(self, update, context):
        f = 'cat'
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        self.stat.statistic_updata(user_id, user_name, user_fullname, f)

        context.bot.sendPhoto(chat_id=update.effective_chat.id, photo=self.get_cat(),
                              reply_markup=self.draw_button())

    def draw_button(self):
        keys = [[InlineKeyboardButton('üêà–ï—â–µ –∫–æ—Ç–∏–∫–∞?!üêà', callback_data='2')]]
        return InlineKeyboardMarkup(inline_keyboard=keys)

    def coffee(self, update, context):
        f = 'coffee'
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        self.stat.statistic_updata(user_id, user_name, user_fullname, f)
        keyboard = [
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='4'),
                InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='5'),
            ],
            [
                InlineKeyboardButton("–ù–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö", callback_data='6')
            ],
        ]

        markup = InlineKeyboardMarkup(keyboard, one_time_keyboard=True)

        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ö–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å @Elrik237 –Ω–∞ –∫–æ—Ñ–µ?',
                                 reply_markup=markup)

    def get_callback_from_button(self, update, context):
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        query = update.callback_query

        keyboard2 = [
            [
                InlineKeyboardButton("–î–∞", callback_data='7'),
                InlineKeyboardButton("–ù–µ—Ç", callback_data='8'),
            ],
            [],
        ]

        markup1 = InlineKeyboardMarkup(keyboard2, one_time_keyboard=True)

        def chat(day):
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f'–Ø —Å–æ–æ–±—â–∏–ª @Elrik237, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ {day} –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è!')
            context.bot.send_message(chat_id=139664901,
                                     text=f'{user_fullname} : @{user_name} —Ö–æ—á–µ—Ç {day} –≤—ã–ø–∏—Ç—å —Å –≤–∞–º–∏ –∫–æ—Ñ–µ!',
                                     reply_markup=markup1)
            self.query_user_id.insert(0, user_id)

        if int(query.data) == 2:
            self.send_cat(update, context)
        elif int(query.data) == 1:
            self.time_now(update, context)
        elif int(query.data) == 3:
            self.coffee(update, context)
        elif int(query.data) == 4:
            chat('—Å–µ–≥–æ–¥–Ω—è')
        elif int(query.data) == 5:
            chat('–∑–∞–≤—Ç—Ä–∞')
        elif int(query.data) == 6:
            chat('–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö')
        elif int(query.data) == 7:
            context.bot.send_message(chat_id=self.query_user_id[0],
                                     text='@Elrik237 –≥–æ—Ç–æ–≤ —Å –í–∞–º–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è!')
            context.bot.send_message(chat_id=139664901, text='–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç')

        elif int(query.data) == 8:
            context.bot.send_message(chat_id=self.query_user_id[0],
                                     text='@Elrik237 –Ω–µ –≥–æ—Ç–æ–≤ —Å –í–∞–º–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è! –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –¥—Ä—É–≥–æ–π –¥–µ–Ω—å!')
            context.bot.send_message(chat_id=139664901, text='–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç')

    def echo(self, update, context):
        f = 'echo'
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        self.stat.statistic_updata(user_id, user_name, user_fullname, f)
        context.bot.send_message(chat_id=update.effective_chat.id, text=update.message.text + ' ' + self.time)

    def time_now(self, update, context):
        f = 'time_now'
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        self.stat.statistic_updata(user_id, user_name, user_fullname, f)
        context.bot.send_message(chat_id=update.effective_chat.id, text=self.time)

    def inline_(self, update, context):
        f = 'inlin_'
        query = update.inline_query.query
        inline_user_fullname = f'{update.inline_query.from_user.first_name} {update.inline_query.from_user.last_name}'
        inline_user_name = update.inline_query.from_user.username
        inline_user_id = str(update.inline_query.from_user.id)
        self.stat.inline_statistic_updata(inline_user_id, inline_user_name, inline_user_fullname, query, f)

        results = list()
        results.append(
            InlineQueryResultArticle(
                id='1',
                title='–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è',
                description='–í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä—É–º—è',
                input_message_content=InputTextMessageContent('–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ' + self.time)
            )
        )

        context.bot.answer_inline_query(update.inline_query.id, results=results)

    def statistic(self, update, context):
        f = 'stat'
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        self.stat.statistic_updata(user_id, user_name, user_fullname, f)
        q = self.stat.stat()
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"{''.join(q)}\n"
                 f"–¢–∞–∫–∂–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç—Å—è –Ω–∞ chatbase.com, –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –Ω–µ–π –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @Elrik237"
        )

    def unknown(self, update, context):
        f = 'unknown'
        user_fullname = f'{update.effective_user.first_name} {update.effective_user.last_name}'
        user_name = update.effective_user.username
        user_id = update.effective_user.id
        self.stat.statistic_updata(user_id, user_name, user_fullname, f)
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text="Sorry, I didn't understand that command.")
